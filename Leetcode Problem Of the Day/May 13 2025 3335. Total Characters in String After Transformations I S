class Solution {
    public int lengthAfterTransformations(String s, int t) {
        final int MOD = 1_000_000_007; 
        if (t == 0)
            return s.length();

        // Counter of characters
        int[] count = new int[26];

        // Count all characters in the string
        for (int i = 0; i < s.length(); i++) {
            char currChar = s.charAt(i);
            int idx = currChar - 'a';
            count[idx]++;
        }

        // Perform t transformations
        while (t > 0) {
            int[] newCount = new int[26];

            // 'a' to 'y' move to next char
            for (int i = 0; i < 25; i++) {
                newCount[i + 1] = (newCount[i + 1] + count[i]) % MOD;
            }

            // 'z' edge case
            newCount[0] = (newCount[0] + count[25])% MOD;
            newCount[1] = (newCount[1] + count[25])% MOD ;

            count = newCount;
            t--;
        }

        // Compute the total length after transformations
        int result = 0;
        for (int i = 0; i < 26; i++) {
            result = (result +  count[i]) % MOD;
        }

        return result;
    }
}
